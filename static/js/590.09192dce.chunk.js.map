{"version":3,"file":"static/js/590.09192dce.chunk.js","mappings":"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","sources":["webpack://my-app/./src/Components/Profile/ProfileInfo/Profile.module.css?ad2f","webpack://my-app/./src/Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css?3d5a","Components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","webpack://my-app/./src/Components/Profile/ProfileInfo/Contacts/Contact.module.css?09cb","Components/Profile/ProfileInfo/Contacts/Contact.tsx","Components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","Components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/Components/Profile/MyPosts/Post/Post.module.css?54ab","Components/Profile/MyPosts/Post/Post.tsx","webpack://my-app/./src/Components/Profile/MyPosts/MyPosts.module.css?bd90","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx","webpack://my-app/./src/Components/common/FormsControls/FormControl.module.css?1b94","Components/common/FormsControls/FormsControl.tsx","utils/validators/validator.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"Profile_descriptionBlock__yFCVo\",\"labelStyle\":\"Profile_labelStyle__CuEzW\",\"userPhoto\":\"Profile_userPhoto__QOIsI\"};","// extracted by mini-css-extract-plugin\nexport default {\"ProfileStatusContainer\":\"ProfileStatus_ProfileStatusContainer__CIbD+\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from \"./ProfileStatus.module.css\"\r\n\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMod = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div className={s.ProfileStatusContainer}>\r\n            {!editMode &&\r\n                <div>\r\n                   <b>Status:</b> <span onDoubleClick={activateEditMod}>{props.status || \"No status\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                           autoFocus={true}\r\n                           onBlur={deactivateEditMode}\r\n                           value={status}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__Z6RP-\"};","import React from 'react';\r\nimport s from \"./Contact.module.css\"\r\n\r\nexport type ContactType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact = ({contactTitle, contactValue}: ContactType) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Contact} from \"../Contacts/Contact\";\r\nimport {profileContactsType, profileType} from \"../../../../redux/reducers/profile/profile-reducer\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/r-store\";\r\n\r\ntype ProfileDataType = {\r\n    profile: profileType\r\n    isOwner: boolean\r\n    goToEditMode: ()=>void\r\n}\r\n\r\nexport const ProfileData = (props: ProfileDataType) => {\r\n\r\n    const login = useSelector<AppStateType, string | null>(state => state.auth.login)\r\n\r\n    return (\r\n        <div>\r\n            <h3>Description</h3>\r\n            {props.isOwner && login && <div>\r\n                <Button variant={\"contained\"} size={\"small\"} onClick={props.goToEditMode}>edit</Button>\r\n            </div>}\r\n            <div style={{paddingTop: \"20px\"}}><b>Name</b>: {props.profile.fullName}</div>\r\n            <div>\r\n                <b>Looking for a job</b>: {props.profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n            </div>\r\n            { props.profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {props.profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>Abut me</b>: {props.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(props.profile.contacts).map(el => {\r\n                return <Contact key={el} contactTitle={el} contactValue={props.profile.contacts[el as keyof profileContactsType]}/>\r\n            })}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {profileContactsType, profileType, saveProfile} from \"../../../../redux/reducers/profile/profile-reducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {useAppDispatch} from \"../../../../redux/r-store\";\r\nimport Button from \"@mui/material/Button\";\r\nimport * as Yup from 'yup';\r\n\r\ntype ProfileDataFormType = {\r\n    profile: profileType\r\n    goToEditModeHandler: () => void\r\n}\r\n\r\nexport const ProfileDataForm = (props: ProfileDataFormType) => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    let contactsForProfile = props.profile.contacts\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            userId: props.profile.userId,\r\n            lookingForAJob: props.profile.lookingForAJob,\r\n            lookingForAJobDescription: props.profile.lookingForAJobDescription,\r\n            fullName: props.profile.fullName,\r\n            aboutMe: props.profile.aboutMe,\r\n            contacts: {\r\n                github: contactsForProfile.github,\r\n                vk: contactsForProfile.vk,\r\n                facebook: contactsForProfile.facebook,\r\n                instagram: contactsForProfile.instagram,\r\n                twitter: contactsForProfile.twitter,\r\n                website: contactsForProfile.website,\r\n                youtube: contactsForProfile.youtube,\r\n                mainLink: contactsForProfile.mainLink\r\n            },\r\n            // photos: props.profile.photos\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(saveProfile(values))\r\n            props.goToEditModeHandler()\r\n        },\r\n        validationSchema: Yup.object({\r\n            lookingForAJobDescription: Yup.string()\r\n                .min(10, 'Must be 10 characters or less')\r\n                .required('Required'),\r\n            fullName: Yup.string()\r\n                .min(3, 'Must be 3 characters or less')\r\n                .required('Required'),\r\n            aboutMe: Yup.string()\r\n                .min(10, 'Must be 10 characters or less')\r\n                .required('Required'),\r\n\r\n            contacts: Yup.object().shape({\r\n                github: Yup.string().nullable()\r\n                    .matches(\r\n                        /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n                        'Enter correct url!'\r\n                    ),\r\n                vk: Yup.string().nullable()\r\n                    .matches(\r\n                        /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n                        'Enter correct url!'\r\n                    ),\r\n                facebook: Yup.string().nullable()\r\n                    .matches(\r\n                        /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n                        'Enter correct url!'\r\n                    ),\r\n                instagram: Yup.string().nullable()\r\n                    .matches(\r\n                        /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n                        'Enter correct url!'\r\n                    ),\r\n                twitter: Yup.string().nullable()\r\n                    .matches(\r\n                        /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n                        'Enter correct url!'\r\n                    ),\r\n                website: Yup.string().nullable()\r\n                    .matches(\r\n                        /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n                        'Enter correct url!'\r\n                    ),\r\n                youtube: Yup.string().nullable()\r\n                    .matches(\r\n                        /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n                        'Enter correct url!'\r\n                    ),\r\n                mainLink: Yup.string().nullable()\r\n                    .matches(\r\n                        /((https?):\\/\\/)?(www.)?[a-z0-9]+(\\.[a-z]{2,}){1,3}(#?\\/?[a-zA-Z0-9#]+)*\\/?(\\?[a-zA-Z0-9-_]+=[a-zA-Z0-9-%]+&?)?$/,\r\n                        'Enter correct url!'\r\n                    ),\r\n            })\r\n        })\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <Button variant={\"contained\"} size={\"small\"} type={\"submit\"}>SAVE</Button>\r\n            </div>\r\n\r\n            <div>\r\n                <b>Full Name: </b>\r\n                <div>\r\n                    <input type={\"text\"}\r\n                           name={\"fullName\"}\r\n                           placeholder={\"Enter full name\"}\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.fullName}\r\n                    />\r\n                    {formik.touched.fullName && formik.errors.fullName &&\r\n                        <div style={{color: \"red\", opacity: \"0.8\"}}>{formik.errors.fullName}</div>}\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job: </b>\r\n                <div>\r\n                    <input type={\"checkbox\"}\r\n                           name={\"lookingForAJob\"}\r\n                           onChange={formik.handleChange}\r\n                           checked={formik.values.lookingForAJob}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional skills: </b>\r\n                <div>\r\n                    <textarea name={\"lookingForAJobDescription\"}\r\n                              placeholder={\"Enter you description\"}\r\n                              onChange={formik.handleChange}\r\n                              value={formik.values.lookingForAJobDescription}\r\n                    />\r\n                    {formik.touched.lookingForAJobDescription && formik.errors.lookingForAJobDescription &&\r\n                        <div style={{color: \"red\", opacity: \"0.8\"}}>{formik.errors.lookingForAJobDescription}</div>}\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <b>Abut me: </b>\r\n                <div>\r\n                    <textarea name={\"aboutMe\"}\r\n                              placeholder={\"Enter you information\"}\r\n                              onChange={formik.handleChange}\r\n                              value={formik.values.aboutMe}\r\n                    />\r\n                    {formik.touched.aboutMe && formik.errors.aboutMe &&\r\n                        <div style={{color: \"red\", opacity: \"0.8\"}}>{formik.errors.aboutMe}</div>}\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <b>Contacts: </b>{Object.keys(props.profile.contacts).map(el => {\r\n\r\n                const isTouched = formik.touched.contacts?.[el as keyof profileContactsType];\r\n                const error = formik.errors.contacts?.[el as keyof profileContactsType];\r\n\r\n                return (\r\n                    <div key={el}>\r\n                        <b>{el}: </b>\r\n                        <div>\r\n                            <input type={\"text\"}\r\n                                   name={\"contacts.\" + el}\r\n                                   placeholder={el}\r\n                                   onChange={formik.handleChange}\r\n                                   value={formik.values.contacts[el as keyof profileContactsType]}\r\n                            />\r\n                            {isTouched && error\r\n                                ? <div style={{color: \"red\", opacity: \"0.8\"}}>{error}</div>\r\n                                : null}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from \"./Profile.module.css\"\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {profileType} from \"../../../redux/reducers/profile/profile-reducer\";\r\nimport userPhoto from \"../../../assecs/image/avatarLogo.png\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatus/ProfileStatusWithHooks\";\r\nimport {ProfileData} from \"./ProfileData/ProfileData\";\r\nimport {ProfileDataForm} from \"./ProfileData/ProfileDataForm\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/r-store\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: profileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfilePropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    const login = useSelector<AppStateType, string | null>(state => state.auth.login)\r\n\r\n    if (!Object.keys(props.profile).length) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onChangeSavePhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files && e.currentTarget.files.length) {\r\n            props.savePhoto(e.currentTarget.files[0])\r\n        }\r\n    }\r\n\r\n    const goToEditModeHandler = () => {\r\n        setEditMode(!editMode)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.profile ?\r\n                <div className={s.descriptionBlock}>\r\n                    <div>\r\n\r\n                        <img src={props.profile.photos.large || userPhoto} className={s.userPhoto} alt={\"user photo\"}/>\r\n                        {props.isOwner && login &&\r\n                            <div>\r\n                                <label className={s.labelStyle}>\r\n                                    <input type={\"file\"} onChange={onChangeSavePhoto} style={{display: \"none\"}}/>\r\n                                    Upload photo\r\n                                </label>\r\n                            </div>\r\n\r\n                        }\r\n\r\n                        <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n                    </div>\r\n                    {editMode\r\n                        ? <ProfileDataForm profile={props.profile} goToEditModeHandler={goToEditModeHandler}/>\r\n                        : <ProfileData profile={props.profile}\r\n                                       isOwner={props.isOwner}\r\n                                       goToEditMode={goToEditModeHandler}/>}\r\n\r\n                    <div></div>\r\n\r\n                </div>\r\n                : <Preloader/>\r\n            }\r\n\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__w-Wlx\"};","import React from 'react';\r\nimport s from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src={\"https://avatars.mds.yandex.net/i?id=0b973180b7366be0209323d646ec2992-5875897-images-thumbs&n=13\"}/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span>{props.likeCount}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__m-rKh\",\"posts\":\"MyPosts_posts__Dis3A\"};","import React from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport {containerPostType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validator\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControl\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/r-store\";\r\n\r\n\r\ntype AddNewPostFormType = {\r\n    newPostText: string\r\n}\r\n\r\ntype Values = {\r\n    newPostText: string;\r\n}\r\n\r\nconst maxLength15 = maxLengthCreator(15)\r\n\r\nfunction AddNewPostForm(props: InjectedFormProps<AddNewPostFormType>) {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"}\r\n                       component={Textarea}\r\n                       placeholder={\"Post message\"}\r\n                       validate={[required, maxLength15]}/>\r\n                {/*<textarea onChange={props.onChange} value={props.value}/>*/}\r\n            </div>\r\n            <div>\r\n                <button>add post</button>\r\n            </div>\r\n            <div>\r\n                <button>post remove</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport const AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport const MyPosts = (props: containerPostType) => {\r\n\r\n    const login = useSelector<AppStateType, string | null>(state => state.auth.login)\r\n\r\n    let postsElement = [...props.posts].reverse().map(el => <Post message={el.message} likeCount={el.likeCount}\r\n                                                                  key={el.id}/>)\r\n    let onAddPost = (values: Values) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    // let onChangeHandlerPost = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let text = e.currentTarget.value\r\n    //     props.updateNewPostText(text)\r\n    // }\r\n    return (\r\n        <div className={s.postBlock}>\r\n            {login && <div>\r\n                <h3>{props.title}</h3>\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n                <div className={s.posts}>\r\n                    {postsElement}\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport {addPostAC, changeNewTextAC, postsType} from \"../../../redux/reducers/profile/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../redux/r-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    posts: postsType[]\r\n    newPostText: string\r\n    title: string\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type containerPostType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts:state.profilePage.posts,\r\n        newPostText:state.profilePage.newPostText,\r\n        title: \"My posts\"\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React from 'react';\r\nimport {ProfileInfo} from \"../ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"../MyPosts/MyPostsContainer\";\r\nimport {profileType} from \"../../../redux/reducers/profile/profile-reducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: profileType\r\n    status:string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nconst Profile = React.memo((props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status}\r\n                         updateStatus={props.updateStatus} isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Profile;","import React, {Component, ComponentType} from 'react';\r\nimport Profile from \"./Profile/Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/r-store\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    initialStateProfileType,\r\n    profileType,\r\n    savePhoto,\r\n    updateStatus\r\n} from \"../../redux/reducers/profile/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    profile: profileType\r\n    status: string\r\n    isAuth: boolean\r\n    logUserId: number | null\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string | undefined) => void\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport type profileContainerType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass ProfileAPIContainer extends Component<profileContainerType & RouteComponentProps<{ userId: string }>> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.logUserId)\r\n            //----\r\n            // if (!userId) {\r\n            //     this.props.history.push(\"/login\")\r\n            // }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<profileContainerType & RouteComponentProps<{ userId: string }>>, prevState: initialStateProfileType, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        // if(!this.props.isAuth) return <Redirect to={\"./login\"}/>\r\n\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        );\r\n    };\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    // isAuth: state.auth.isAuth\r\n    logUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfile,\r\n        getStatus: getStatus,\r\n        updateStatus: updateStatus,\r\n        savePhoto: savePhoto\r\n    }),\r\n    withRouter,\r\n    // AuthRedirectComponent\r\n)(ProfileAPIContainer)\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControl_formControl__wwlWx\",\"error\":\"FormControl_error__YuTS4\",\"formSummaryError\":\"FormControl_formSummaryError__JqjQP\"};","import React from \"react\";\r\nimport s from \"./FormControl.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\ntype TextareaType = {\r\n    input: inputType\r\n    meta: metaType\r\n}\r\ntype inputType = {\r\n    name: string\r\n    onBlur: any\r\n    onChange: any\r\n    onDragStart: any\r\n    onDrop: any\r\n    onFocus: any\r\n    value: string\r\n}\r\ntype metaType = {\r\n    active: boolean\r\n    asyncValidating: boolean\r\n    autofilled: boolean\r\n    dirty: boolean\r\n    dispatch: any\r\n    error: undefined | any\r\n    form: string\r\n    initial: undefined | any\r\n    invalid: boolean\r\n    pristine: boolean\r\n    submitFailed: boolean\r\n    submitting: boolean\r\n    touched: boolean\r\n    valid: boolean\r\n    visited: boolean\r\n    warning: undefined | any\r\n}\r\n\r\nconst FormControl: React.FC<TextareaType> = ({\r\n                                                 input,\r\n                                                 meta,\r\n                                                 children,\r\n                                                 ...props\r\n                                             }) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = ({input, meta, ...props}: TextareaType) => {\r\n    return (\r\n        <FormControl input={input} meta={meta}><textarea {...input} {...props}/></FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}: TextareaType) => {\r\n    return (\r\n        <FormControl input={input} meta={meta}><input {...input} {...props}/></FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string,\r\n                            name: string,\r\n                            validate: any,\r\n                            component: any,\r\n                            props: any = {},\r\n                            text:string = \"\") =>\r\n    <Field placeholder={placeholder}\r\n           name={name}\r\n           validate={validate}\r\n           component={component}/>","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\n//maxlength15, minlength2\r\n\r\n\r\nexport const maxLengthCreator = (maxLength:number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","Contact","contactTitle","contactValue","ProfileData","login","useSelector","state","auth","isOwner","Button","variant","size","onClick","goToEditMode","style","paddingTop","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","el","ProfileDataForm","dispatch","useAppDispatch","contactsForProfile","formik","useFormik","initialValues","userId","github","vk","facebook","instagram","twitter","website","youtube","mainLink","onSubmit","values","saveProfile","goToEditModeHandler","validationSchema","Yup","min","required","shape","nullable","matches","handleSubmit","type","name","placeholder","handleChange","touched","errors","color","opacity","checked","isTouched","error","ProfileInfo","length","Preloader","src","photos","large","userPhoto","alt","files","savePhoto","display","message","likeCount","maxLength15","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","Field","component","Textarea","validate","MyPostsContainer","connect","posts","profilePage","newPostText","title","addPost","addPostAC","postsElement","reverse","id","React","ProfileAPIContainer","this","match","params","String","logUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","isAuth","withRouter","FormControl","input","meta","children","hasError","maxLength"],"sourceRoot":""}