{"version":3,"file":"static/js/862.542a28e1.chunk.js","mappings":"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","sources":["webpack://my-app/./src/Components/Profile/ProfileInfo/Profile.module.css?ad2f","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/Components/Profile/MyPosts/Post/Post.module.css?54ab","Components/Profile/MyPosts/Post/Post.tsx","webpack://my-app/./src/Components/Profile/MyPosts/MyPosts.module.css?bd90","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"Profile_descriptionBlock__yFCVo\"};","import React, {ChangeEvent, useEffect, useRef, useState} from 'react';\r\n\r\ntype ProfileStatusWithHooksType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusWithHooksType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMod = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMod}>{props.status || \"No status\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                           autoFocus={true}\r\n                           onBlur={deactivateEditMode}\r\n                           value={status}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from \"./Profile.module.css\"\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {profileType} from \"../../../redux/reducers/profile/profile-reducer\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: profileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfilePropsType) => {\r\n    // console.log(Object.keys(props.profile))\r\n    if (!Object.keys(props.profile).length) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/*<div>*/}\r\n            {/*    <img*/}\r\n            {/*        src={\"https://wallpapershome.ru/images/wallpapers/nochnoe-nebo-1920x1080-5k-4k-zvezdi-gori-most-novaya-zelandiya-547.jpg\"}*/}\r\n            {/*        alt={\"avatar\"} width={\"600\"} height={\"400\"}/>*/}\r\n            {/*</div>*/}\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large}/>\r\n                {/*<ProfileStatus status={props.status}*/}\r\n                {/*               updateStatus={props.updateStatus}/>*/}\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__w-Wlx\"};","import React from 'react';\r\nimport s from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src={\"https://avatars.mds.yandex.net/i?id=0b973180b7366be0209323d646ec2992-5875897-images-thumbs&n=13\"}/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span>{props.likeCount}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__m-rKh\",\"posts\":\"MyPosts_posts__Dis3A\"};","import React, {memo} from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport {containerPostType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validator\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControl\";\r\n\r\n\r\ntype AddNewPostFormType = {\r\n    newPostText: string\r\n}\r\n\r\ntype Values = {\r\n    newPostText: string;\r\n}\r\n\r\nconst maxLength15 = maxLengthCreator(15)\r\n\r\nfunction AddNewPostForm(props: InjectedFormProps<AddNewPostFormType>) {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"}\r\n                       component={Textarea}\r\n                       placeholder={\"Post message\"}\r\n                       validate={[required, maxLength15]}/>\r\n                {/*<textarea onChange={props.onChange} value={props.value}/>*/}\r\n            </div>\r\n            <div>\r\n                <button>add post</button>\r\n            </div>\r\n            <div>\r\n                <button>post remove</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport const AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nexport const MyPosts = (props: containerPostType) => {\r\n    console.log(\"render MyPosts\")\r\n    let postsElement = [...props.posts].reverse().map(el => <Post message={el.message} likeCount={el.likeCount}\r\n                                                   key={el.id}/>)\r\n    let onAddPost = (values: Values) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    // let onChangeHandlerPost = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let text = e.currentTarget.value\r\n    //     props.updateNewPostText(text)\r\n    // }\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>{props.title}</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport {addPostAC, changeNewTextAC, postsType} from \"../../../redux/reducers/profile/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../redux/r-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype mapStateToPropsType = {\r\n    posts: postsType[]\r\n    newPostText: string\r\n    title: string\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type containerPostType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts:state.profilePage.posts,\r\n        newPostText:state.profilePage.newPostText,\r\n        title: \"My posts\"\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);","import React, {memo} from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {profileType} from \"../../redux/reducers/profile/profile-reducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: profileType\r\n    status:string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = React.memo((props: ProfilePropsType) => {\r\n    console.log(\"render profile\")\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Profile;","import React, {Component, ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/r-store\";\r\nimport {getStatus, getUserProfile, profileType, updateStatus} from \"../../redux/reducers/profile/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AuthRedirectComponent} from \"../../hoc/AuthRedirectComponent\";\r\n\r\ntype mapStateToPropsType = {\r\n    profile: profileType\r\n    status: string\r\n    isAuth: boolean\r\n    logUserId: number\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string | undefined) => void\r\n}\r\n\r\nexport type profileContainerType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass ProfileAPIContainer extends Component<profileContainerType & RouteComponentProps<{ userId: string }>> {\r\n\r\n    componentDidMount() {\r\n        let userId = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.logUserId\r\n            //----\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        // if(!this.props.isAuth) return <Redirect to={\"./login\"}/>\r\n\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n            />\r\n        );\r\n    };\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    // isAuth: state.auth.isAuth\r\n    logUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfile,\r\n        getStatus: getStatus,\r\n        updateStatus: updateStatus\r\n    }),\r\n    withRouter,\r\n    // AuthRedirectComponent\r\n)(ProfileAPIContainer)\r\n\r\n\r\n"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","Object","keys","profile","length","className","s","src","photos","large","Preloader","message","likeCount","maxLength15","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPostsContainer","connect","state","posts","profilePage","newPostText","title","dispatch","addPost","addPostAC","console","log","postsElement","reverse","map","el","id","values","React","ProfileAPIContainer","userId","this","match","params","logUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"sourceRoot":""}