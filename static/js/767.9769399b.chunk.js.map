{"version":3,"file":"static/js/767.9769399b.chunk.js","mappings":"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","sources":["webpack://my-app/./src/Components/Dialogs/Dialogs.module.css?db5c","webpack://my-app/./src/Components/Dialogs/Message/DialogsMessage.module.css?4455","Components/Dialogs/Message/Message.tsx","webpack://my-app/./src/Components/Dialogs/DialogItem/DialogsItem.module.css?3ebf","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/AddMessageForm.tsx","Components/Dialogs/Dialogs.tsx","hoc/AuthRedirectComponent.tsx","Components/Dialogs/DialogsContainer.tsx","webpack://my-app/./src/Components/common/FormsControls/FormControl.module.css?1b94","Components/common/FormsControls/FormsControl.tsx","utils/validators/validator.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Hqi+a\",\"dialogsItems\":\"Dialogs_dialogsItems__Q-hJm\",\"active\":\"Dialogs_active__+-Upc\",\"messages\":\"Dialogs_messages__Rxr9C\",\"message\":\"Dialogs_message__AXazt\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"DialogsMessage_dialogs__BINCe\",\"dialogsItems\":\"DialogsMessage_dialogsItems__oSgK1\",\"active\":\"DialogsMessage_active__TO56a\",\"messages\":\"DialogsMessage_messages__Yd7MU\",\"message\":\"DialogsMessage_message__G9Rv7\"};","import React from 'react';\r\nimport s from \"./DialogsMessage.module.css\";\r\n\r\ntype MessagePropsType = {\r\n    message:string\r\n}\r\n\r\nexport const Message = (props:MessagePropsType) => {\r\n    return <div className={s.message}>\r\n        {props.message}\r\n    </div>\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"DialogsItem_dialogs__yAZnS\",\"dialogsItems\":\"DialogsItem_dialogsItems__RxJoC\",\"active\":\"DialogsItem_active__y+idr\",\"messages\":\"DialogsItem_messages__kZcaA\",\"message\":\"DialogsItem_message__JZ7Iq\"};","import s from \"./DialogsItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype DialogsPropsType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogsPropsType) => {\r\n    let path = \"/dialogs/\" + props.id\r\n    return <div className={s.dialog + \" \" + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validator\";\r\n\r\ntype AddMessageFormType = {\r\n\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\nexport const AddMessageForm = (props:InjectedFormProps<AddMessageFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       name={\"newMessageBody\"}\r\n                       placeholder={\"Enter your message\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"}) (AddMessageForm)","import React from 'react';\r\nimport s from \"./Dialogs.module.css\"\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {dialogsContainerType} from \"./DialogsContainer\";\r\nimport {AddMessageFormRedux} from \"./Message/AddMessageForm\";\r\n\r\n\r\nexport const Dialogs = (props: dialogsContainerType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogElements = state.dialog.map(el => <DialogItem name={el.name} id={el.id} key={el.id}/>)\r\n\r\n    let messagesElement = state.message.map(el => <Message message={el.message} key={el.id}/>)\r\n\r\n    let addNewMessage = (values:any) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/r-store\";\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function AuthRedirectComponent<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to={\"./login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectRedirectComponent\r\n}","import React from 'react';\r\nimport {initialStateType, sendMessageAC} from \"../../redux/reducers/dialig/dialogs-reducer\";\r\nimport {AppStateType} from \"../../redux/r-store\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AuthRedirectComponent} from \"../../hoc/AuthRedirectComponent\";\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: initialStateType\r\n    newMessageBody: initialStateType\r\n    // isAuth:boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    sendMessage:(body:string) => void\r\n}\r\n\r\nexport type dialogsContainerType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nlet mapStateToProps = (state: AppStateType):mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.messagePage,\r\n        newMessageBody: state.messagePage,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch):mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody:string) => {\r\n            let action = sendMessageAC(newMessageBody)\r\n           dispatch(action)\r\n        }\r\n    }\r\n}\r\ncompose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    AuthRedirectComponent\r\n)(Dialogs)\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent(Dialogs))\r\nexport default DialogsContainer","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControl_formControl__wwlWx\",\"error\":\"FormControl_error__YuTS4\",\"formSummaryError\":\"FormControl_formSummaryError__JqjQP\"};","import React from \"react\";\r\nimport s from \"./FormControl.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\ntype TextareaType = {\r\n    input: inputType\r\n    meta: metaType\r\n}\r\ntype inputType = {\r\n    name: string\r\n    onBlur: any\r\n    onChange: any\r\n    onDragStart: any\r\n    onDrop: any\r\n    onFocus: any\r\n    value: string\r\n}\r\ntype metaType = {\r\n    active: boolean\r\n    asyncValidating: boolean\r\n    autofilled: boolean\r\n    dirty: boolean\r\n    dispatch: any\r\n    error: undefined | any\r\n    form: string\r\n    initial: undefined | any\r\n    invalid: boolean\r\n    pristine: boolean\r\n    submitFailed: boolean\r\n    submitting: boolean\r\n    touched: boolean\r\n    valid: boolean\r\n    visited: boolean\r\n    warning: undefined | any\r\n}\r\n\r\nconst FormControl: React.FC<TextareaType> = ({\r\n                                                 input,\r\n                                                 meta,\r\n                                                 children,\r\n                                                 ...props\r\n                                             }) => {\r\n    const hasError = meta.touched && meta.error\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = ({input, meta, ...props}: TextareaType) => {\r\n    return (\r\n        <FormControl input={input} meta={meta}><textarea {...input} {...props}/></FormControl>\r\n    )\r\n}\r\n\r\nexport const Input = ({input, meta, ...props}: TextareaType) => {\r\n    return (\r\n        <FormControl input={input} meta={meta}><input {...input} {...props}/></FormControl>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string,\r\n                            name: string,\r\n                            validate: any,\r\n                            component: any,\r\n                            props: any = {},\r\n                            text:string = \"\") =>\r\n    <Field placeholder={placeholder}\r\n           name={name}\r\n           validate={validate}\r\n           component={component}/>","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\n//maxlength15, minlength2\r\n\r\n\r\nexport const maxLengthCreator = (maxLength:number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}"],"names":["Message","props","className","s","message","DialogItem","path","id","to","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogElements","dialog","map","el","messagesElement","values","sendMessage","newMessageBody","mapStateToProps","isAuth","auth","AuthRedirectComponent","Component","connect","restProps","messagePage","mapDispatchToProps","dispatch","action","sendMessageAC","compose","FormControl","input","meta","children","hasError","touched","error","value","maxLength","length"],"sourceRoot":""}